#lang racket

(require math)

;; TDA cardsSet

;; Representacion TDA cardsSet:
;; 
;; cardsSet va a ser un "Mazo de cartas" el cual se construye con ciertos parametros.
;; los cuales son los siguientes Elements, numE, maxC, rndFn; donde:
;; Elements: list (lista de elementos)
;; numE: int (entero positivo, orden + 1 del juego)
;; maxC: int (cantidad maxima de cartas, si es negativo, se retorna la totalidad del mazo)
;; rndFn: fn (funcion para otorgar numeros random, los cualen pueden utilizarse para cualquier aspecto y representar transparencia referencial)

;; ------- Constructores TDA cardsSet -------

;; Descripcion: Funcion que construye un mazo de cartas dado los parametros de entrada
;;              (lista de elementos, numero maximo de elementos, numero maximo de cartas y la funcion de randomizaciÃ³n).
;; Dom: Elements(list) x numE(int) x maxC(int) x rndFn(fn)
;; Rec: cardsSet
;; Recursion: no aplica por encima, pero dentro del llamado a la siguiente funcion si utilizan recursion para la generacion.
(define cardsSet (lambda (Elements numE maxC rndFn)
                   (cond [(validOrden? (- numE 1) 2 2) (CrearCarta1 (- numE 1) 1 '() Elements maxC rndFn)]
                         [else "No es posible crear el mazo dado que (numE - 1) no es un orden Valido"])))
                   
;; Descripcion: Funcion que se encarga de crear la primera carta del mazo.
;; Dom: n(int) x i(int) x lista(list) x Elements(list) x maxC(int) x rndFn(fn).
;; Rec: CrearCarta2(llamado a otra funcion para crear las siguientes n cartas del mazo).
;; Recursion: Cola, ya que no deja estados pendientes.
(define CrearCarta1 (lambda (n i lista Elements maxC rndFn)
                      (cond [(= i (+ n 2)) (CrearCarta2 n 1 1 '() (cons (reverse lista) '()) Elements maxC rndFn)]
                            [else (CrearCarta1 n (+ i 1) (cons i lista) Elements maxC rndFn)])))


;; Descripcion: Funcion que se encarga de crear las siguientes n cartas del mazo.
;; Dom: n(int) x i(int) x j(int) x lista(list) x lista2(list) x Elements(list) x maxC(int) x rndFn(fn).
;; Rec: CrearCarta3(llamado a otra funcion para crear el resto de cartas del mazo).
;; Recursion: Cola, ya que no deja estados pendientes.
(define CrearCarta2 (lambda (n i j lista lista2 Elements maxC rndFn)
                      (cond [(= i (+ n 1)) (CrearCarta3 n 1 1 1 '() lista2 Elements maxC rndFn)]
                            [(= j 1) (CrearCarta2 n i (+ j 1) (cons (+ (* n i) (+ j 1))(cons 1 lista)) lista2 Elements maxC rndFn)]
                            [(not (= j (+ n 1))) (CrearCarta2 n i (+ j 1) (cons (+ (* n i) (+ j 1)) lista) lista2 Elements maxC rndFn)]
                            [(= j (+ n 1)) (CrearCarta2 n (+ i 1) (- j  n) '() (cons (reverse lista) lista2) Elements maxC rndFn)])))


;; Descripcion: Funcion que se encarga de crear las siguientes n^2 cartas del mazo.
;; Dom: n(int) x i(int) x k(int) x lista(list) x lista2(fn) x Elements(list) x maxC(int) x rndFn(fn).
;; Rec: ChangeElements(llamado a otra funcion para cambiar los numeros creados por "Elementos").
;; Recursion: Cola, ya que no deja estados pendientes.
(define CrearCarta3 (lambda (n i j k lista lista2 Elements maxC rndFn)
                      (cond [(= i (+ n 1)) (ChangeElements (reverse lista2) Elements '() '() maxC rndFn)]
                            [(= j (+ n 1)) (CrearCarta3 n (+ i 1) (- j n) k '() lista2 Elements maxC rndFn)]
                            [(= k 1) (CrearCarta3 n i j (+ k 1) (cons (+ n 2 (* n (- k 1)) (remainder (+ (*(- i 1)(- k 1))(- j 1)) n))(cons (+ i 1) lista)) lista2 Elements maxC rndFn)]
                            [(not (= k (+ n 1))) (CrearCarta3 n i j (+ k 1) (cons (+ n 2 (* n (- k 1)) (remainder (+ (*(- i 1)(- k 1))(- j 1)) n)) lista) lista2 Elements maxC rndFn)]
                            [(= k (+ n 1)) (CrearCarta3 n i (+ j 1) (- k n) '() (cons (reverse lista) lista2) Elements maxC rndFn)])))


;; Descripcion: Funcion que se encarga de cambiar los numeros generados en una carta, por elementos correspondientes.
;;              al mismo valor dentro de una lista de elementos.
;; Dom: lista(list) x Elements(list) x lista2(list) x lista3(list) x maxC(int) x rndFn(fn).
;; Rec: MaxCards(llamado a otra funcion para crear el mazo con un maximo de cartas).
;; Recursion: Cola, ya que no deja estados pendientes.
(define ChangeElements (lambda (lista Elements lista2 lista3 maxC rndFn)
                         (cond [(null? Elements) (MaxCards lista maxC '() rndFn)]
                               [(null? lista) (MaxCards (reverse lista3) maxC '() rndFn)]
                               [else (cond [(not(null?(car lista)))
                                            (ChangeElements (cons (cdar lista) (cdr lista)) Elements (Changer (- (caar lista) 1) Elements lista2) lista3 maxC rndFn)]
                                           [(null?(car lista)) (ChangeElements (cdr lista) Elements '() (cons (reverse lista2) lista3) maxC rndFn)])])))


;; Descripcion: Funcion que se encarga de ingresar un elemento en la posision num - 1 en una lista.
;; Dom: num(int) x Elements(list) x lista2(list)
;; Rec: lista2(lista con la misma cantidad de elementos que ya tenia + 1).
;; Recursion: Cola, ya que no deja estados pendientes.
(define Changer (lambda (num Elements lista2)
                  (cond [(> num (length Elements)) (cons num lista2)]
                        [(< num 0) (cons num lista2)]
                        [(null? Elements) (cons num lista2)]
                        [(= num 0) (cons (car Elements) lista2)]
                        [else (Changer (- num 1) (cdr Elements) lista2)])))


;; Descripcion: Funcion que crea un mazo con una cantidad maxima de cartas en el (si es negativo crea la cantidad maxima de cartas).
;; Dom: lista(list) x maxC(int) x lista2(list) x rndFn(fn)
;; Rec: cardsSet(mazo de cartas randomizado)
;; Recursion: Cola, ya que no deja estados pendientes
(define MaxCards (lambda (lista maxC lista2 rndFn)
                   (cond [(= maxC -1) lista]
                         [(= maxC 0) (reverse lista2)]
                         [else (MaxCards (cdr lista) (- maxC 1) (cons (car lista) lista2) rndFn)])))

;; ------- Funciones de pertenencia TDA cardsSet -------

;; Descripcion: Funcion que verifica si un mazo de cartas es un mazo de Dobble.
;; Dom: carsSet(mazo de cartas) 
;; Rec: Boolean
;; Recursion: Cola, ya que no deja estados pendientes.
(define dobble? (lambda (cardsSet)  
                  (cond [(null? cardsSet) #t]
                        [(OneElementListEqualLists? cardsSet)
                         (cond[(null? (car cardsSet)) (dobble? (cdr cardsSet))]
                              [else (cond [(inCard? (caar cardsSet) (cdar cardsSet)) #f] ;; caar es para acortar el (car (car lista)), y cdar para (cdr (car lista))
                                          [else (dobble? (cons (cdar cardsSet)(cdr cardsSet)))])])]
                        [else #t])))


;; Descripcion: Funcion que verifica si una carta, tiene un solo elemento en comun con el resto de cartas del mazo.
;; Dom: carsSet (mazo de cartas)
;; Rec: Boolean
;; Recursion: Cola, ya que no deja estados pendientes.
(define OneElementListEqualLists?(lambda (cardsSet)
                                   (cond[(null? cardsSet) #t]
                                        [(null? (cdr cardsSet)) #t]
                                        [else (cond[(OneElementEqual? (car cardsSet)(cadr cardsSet) 0)(OneElementListEqualLists? (cons (car cardsSet)(cddr cardsSet)))];; cddr = (cdr(cdr lista))
                                                   [else #f])])))


;; Descripcion: Funcion que verifica si una lista (carta) tiene un unico elemento igual con otra lista (carta).
;; Dom: lista(list) x lista(list) x i (int)
;; Rec: Boolean
;; Recursion: Cola, ya que no deja estados pendientes.
(define OneElementEqual?(lambda (lista1 lista2 i)
                          (cond[(= i 2) #f]
                               [else(cond[(null? lista1)
                                          (cond[(= i 1) #t]
                                               [else #f])]
                                         [else(cond [(inCard? (car lista1) lista2) (OneElementEqual? (cdr lista1) lista2 (+ i 1))]
                                                    [else (OneElementEqual? (cdr lista1) lista2 i)])])])))


;; Descripcion: Funcion que verifica si un Elemento se encuentra en una lista / carta
;; Dom: elemento(string) x lista(list) 
;; Rec: Boolean
;; Recursion: Cola, ya que no deja estados pendientes.
(define inCard? (lambda (elemento lista)
                  (cond [(null? lista) #f]
                        [else (cond [(eq? elemento (car lista)) #t]
                                    [else (inCard? elemento (cdr lista))])])))

;; Descripcion: Funcion que verifica si un Elemento se encuentra en una lista / carta.
;; Dom: elemento(string) x lista(list) 
;; Rec: Boolean
;; Recursion: Cola, ya que no deja estados pendientes.
(define validOrden? (lambda (n i j)
                      (cond [(prime? n)#t]
                            [(= n 1) #t]
                            [(< n 1) #f]
                            [(<= n i) #f]
                            [else (cond [(prime? i)
                                         (cond [(= n (expt i j)) #t]
                                               [(< n (expt i j)) (validOrden? n (+ i 1) 2)]
                                               [(> n (expt i j)) (validOrden? n i (+ j 1))])]
                                        [else (validOrden? n (+ i 1) 2)])])))

;; ------- Selectores TDA cardsSet -------

;; Descripcion: Funcion que calcula la cantidad total de cartas de un conjunto.
;; Dom: cardsSet (mazo de cartas)
;; Rec: +int (entero positivo)
;; Recursion: no Aplica.
(define numCards (lambda (cardsSet)
                   (length cardsSet)))


;; Descripcion: Funcion que retorna una carta en cualquier posision n, si n es negativo o muy grande retorna #f.
;; Dom: cardsSet (mazo de cartas) x n (int)
;; Rec: card (carta con n+1 elementos)
;; Recursion: Cola.
(define nthCard (lambda (cardsSet n)
                  (cond[(or (< n 0)(> n (- (length cardsSet) 1))) #f]
                       [(> n 0) (nthCard (cdr cardsSet) (- n 1))]
                       [else (car cardsSet)])))


;; Descripcion: Funcion que calcula la cantidad de cartas que debe poseer el mazo para ser un conjunto "Valido" dada una carta cualquiera del mazo.
;; Dom: card (carta)
;; Rec: +int (entero positivo)
;; Recursion: no Aplica.
(define findTotalCards(lambda (card) (+ (* (- (length card) 1) (- (length card) 1)) (- (length card) 1) 1)))


;; Descripcion: Funcion que calcula la cantidad de elementos que debe poseer el mazo para ser un conjunto "Valido" dada una carta cualquiera del mazo.
;; Dom: card (carta)
;; Rec: +int (entero positivo)
;; Recursion: no Aplica.
(define requiredElements(lambda (card) (+ (* (- (length card) 1) (- (length card) 1)) (- (length card) 1) 1)))


;; Descripcion: Funcion que se encarga de encontrar las cartas faltantes de un conjunto.
;; Dom: cardsSet (mazo de cartas)
;; Rec: cardsSet (mazo con las cartas restantes)
;; Recursion: aplica Cola en la funcion auxiliar de "CicloFiltro"

(define missingCards(lambda (cardsSet)
                      (cicloFiltro cardsSet (CrearCarta1 (- (length (car cardsSet)) 1) 1 '() elementos -1 rndFn))))


;; ------- Modificadores TDA cardsSet -------


;; Descripcion: Funcion que se encarga de Eliminar del mazo nuevo, las cartas existentes en el mazo.
;; Dom: cardsSet (mazo de cartas con menos o igual cantidad de cartas) x cardsSet (mazo de cartas con todas las cartas)
;; Rec: cardsSet (mazo con las cartas restantes)
;; Recursion: Cola
(define cicloFiltro (lambda (lista1 lista2)
                      (cond[(null? lista1) lista2]
                           [else (cicloFiltro (cdr lista1) (remove (car lista1) lista2))])))


;; Descripcion: Funcion que hace string el mazo completo de cartas.
;; Dom: cardsSet (mazo de cartas)
;; Rec: string
;; Recursion: Natural
(define cardsSet->string (lambda(cardsSet)
                           (cond [(= (findTotalCards(car cardsSet))(numCards cardsSet)) (string-append "--------------------\n| Tablero de juego |\n--------------------\n" "Carta "
                                                                                                       (number->string (+ (- (findTotalCards(car cardsSet))(numCards cardsSet)) 1))
                                                                                                       ": " (card->string (car cardsSet)) (cardsSet->string (cdr cardsSet)))]
                                 [(null? (cdr cardsSet))(string-append "Carta " (number->string (+ (- (findTotalCards(car cardsSet))(numCards cardsSet)) 1))
                                                                       ": " (card->string (car cardsSet)) "--------------------\n")]
                                 [else (string-append "Carta " (number->string (+ (- (findTotalCards(car cardsSet))(numCards cardsSet)) 1))
                                                      ": " (card->string (car cardsSet)) (cardsSet->string (cdr cardsSet)))])))


;; Descripcion: Funcion que transforma en string una carta.
;; Dom: card (carta del mazo)
;; Rec: string
;; Recursion: Natural
(define card->string (lambda (Carta)
                            (cond[(null? (cdr Carta)) (string-append (car Carta) "\n")]
                                 [else (string-append (car Carta) " - " (card->string (cdr Carta)))])))

;; ------- Otras funciones TDA cardsSet -------

;; Descripcion: Funcion random que se encarga de generar un numero aleatorio dado una semilla.
;; Dom: xn (int)
;; Rec: int
;; Recursion: no aplica
(define m 2147483647)
(define a 1103515245)
(define c 12345)

(define rndFn (lambda (xn)
                   (modulo (+ (* a xn) c) m)
                 )
)

;; elementos modificables para crear un mazo de cartas.

(define elementos (list "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "AA" "BB" "CC" "DD" "EE" "FF" "GG" "HH" "II" "JJ" "KK" "LL" "MM"))
(define numElementsPerCard 4)
(define maxCards -1)
(define cardsSet-3 (cardsSet elementos numElementsPerCard maxCards rndFn))

; Importar
(provide (all-defined-out))

;; Ejemplos de uso de funcionalidades TDA cardsSet

;; Ejemplos de uso de cardsSet (FUNCION REQUERIDA):
;;   (cardsSet (list "A" "B" "C") 2 -1 rndFn)
;;   (cardsSet (list "A" "B" "C" "D" "E" "F" "G") 3 -1 rndFn)
;;   (cardsSet (list "1" "2" "3") 2 -1 rndFn)

;; Ejemplos de uso de CrearCarta1:
;;   (CrearCarta1 2 1 '() (list "A" "B" "C") -1 rndFn)
;;   (CrearCarta1 3 1 '() (list "A" "B" "C" "D" "E" "F" "G") -1 rndFn)
;;   (CrearCarta1 2 1 '() (list "1" "2" "3") -1 rndFn)

;; Ejemplos de uso de CrearCarta2:
;;   (CrearCarta2 2 1 1 '() '() (list "A" "B" "C") -1 rndFn)
;;   (CrearCarta2 3 1 1 '() '() (list "A" "B" "C" "D" "E" "F" "G") -1 rndFn)
;;   (CrearCarta2 2 1 1 '() '() (list "1" "2" "3") -1 rndFn)

;; Ejemplos de uso de CrearCarta3:
;;   (CrearCarta3 2 1 1 1 '() '() (list "A" "B" "C") -1 rndFn)
;;   (CrearCarta3 3 1 1 1 '() '() (list "A" "B" "C" "D" "E" "F" "G") -1 rndFn)
;;   (CrearCarta3 2 1 1 1 '() '() (list "1" "2" "3") -1 rndFn)

;; Ejemplos de uso de ChangeElements:
;;   (ChangeElements '((1 2) (1 3) (2 3)) (list "A" "B" "C") '() '() -1 rndFn)
;;   (ChangeElements '((1 2 3) (1 4 5) (1 6 7) (2 4 6) (2 5 7) (3 4 7) (3 5 6)) (list "A" "B" "C" "D" "E" "F" "G") '() '() -1 rndFn)
;;   (ChangeElements '((1 2) (1 3) (2 3)) (list "1" "2" "3") '() '() -1 rndFn)

;; Ejemplos de uso de Changer:
;;   (Changer 1 (list "A" "B" "C") '())
;;   (Changer 7 (list "A" "B" "C" "D" "E" "F" "G") '("F" "A"))
;;   (Changer 2 (list "1" "2" "3") '("1"))

;; Ejemplos de uso de MaxCards:
;;   (MaxCards '(("A" "B") ("A" "C") ("B" "C")) -1 '() rndFn)
;;   (MaxCards '(("A" "B" "C") ("A" "D" "E") ("A" "F" "G") ("B" "D" "F") ("B" "E" "G") ("C" "D" "G") ("C" "E" "F")) 5 '() rndFn)
;;   (MaxCards '(("1" "2") ("1" "3") ("2" "3")) -1 '() rndFn)

;; Ejemplos de uso de dobble? (FUNCION REQUERIDA):
;;   (dobble? (cardsSet (list "A" "B" "C") 2 -1 rndFn))
;;   (dobble? (cardsSet (list "A" "B" "C" "D" "E" "F" "G") 3 -1 rndFn))
;;   (dobble? (cardsSet (list "1" "2" "3") 2 -1 rndFn))

;; Ejemplos de uso de OneElementListEqualLists?:

;;   (OneElementListEqualLists? (cardsSet (list "A" "B" "C") 2 -1 rndFn))
;;   (OneElementListEqualLists? (cardsSet (list "A" "B" "C" "D" "E" "F" "G") 3 -1 rndFn))
;;   (OneElementListEqualLists? (cardsSet (list "1" "2" "3") 2 -1 rndFn))

;; Ejemplos de uso de OneElementEqual?:

;;   (OneElementEqual? ("A" "D" "E") ("A" "F" "G") 0)
;;   (OneElementEqual? ("A" "B" "C") ("A" "B" "G") 0)
;;   (OneElementEqual? ("A" "D" "E") ("B" "C" "D") 0)

;; Ejemplos de uso de inCard?:

;;   (inCard? "A" ("A" "F" "G") 0)
;;   (inCard? "B" ("A" "B" "G") 0)
;;   (inCard? "A" ("B" "C" "D") 0)

;; Ejemplos de uso de validOrden?:

;;   (validOrden? 2 2 2)
;;   (validOrden? 3 2 2)
;;   (validOrden? 6 2 2)

;; Ejemplos de uso de numCards (FUNCION REQUERIDA):

;;   (numCards (cardsSet (list "A" "B" "C") 2 -1 rndFn))
;;   (numCards (cardsSet (list "A" "B" "C" "D" "E" "F" "G") 3 -1 rndFn))
;;   (numCards (cardsSet (list "1" "2" "3") 2 -1 rndFn))

;; Ejemplos de uso de nthCard (FUNCION REQUERIDA):

;;   (nthCard (cardsSet (list "A" "B" "C") 2 -1 rndFn) 3)
;;   (nthCard (cardsSet (list "A" "B" "C" "D" "E" "F" "G") 3 -1 rndFn) 5)
;;   (nthCard (cardsSet (list "1" "2" "3") 2 -1 rndFn) 1)

;; Ejemplos de uso de findTotalCards (FUNCION REQUERIDA):

;;   (findTotalCards (nthCard (cardsSet (list "A" "B" "C") 2 -1 rndFn) 3))
;;   (findTotalCards (nthCard (cardsSet (list "A" "B" "C" "D" "E" "F" "G") 3 -1 rndFn) 5))
;;   (findTotalCards (nthCard (cardsSet (list "1" "2" "3") 2 -1 rndFn) 1))

;; Ejemplos de uso de requiredElements (FUNCION REQUERIDA):

;;   (requiredElements ("A" "B"))
;;   (requiredElements ("A" "B" "C"))
;;   (requiredElements ("B" "C"))

;; Ejemplos de uso de missingCards (FUNCION REQUERIDA):

;;   (missingCards (cardsSet (list "A" "B" "C") 2 -1 rndFn))
;;   (missingCards (cardsSet (list "A" "B" "C" "D" "E" "F" "G") 3 -1 rndFn))
;;   (missingCards (cardsSet (list "1" "2" "3") 2 -1 rndFn))

;; Ejemplos de uso de cicloFiltro:

;;   (cicloFiltro (cardsSet (list "A" "B" "C") 2 2 rndFn) (cardsSet (list "A" "B" "C") 2 2 rndFn))
;;   (cicloFiltro (cardsSet (list "A" "B" "C" "D" "E" "F" "G") 3 5 rndFn) (cardsSet (list "A" "B" "C" "D" "E" "F" "G") 3 -1 rndFn))
;;   (cicloFiltro (cardsSet (list "1" "2" "3") 2 -1 rndFn) (cardsSet (list "1" "2" "3") 2 -1 rndFn))


;; Ejemplos de uso de cardsSet->string (FUNCION REQUERIDA):

;;   (cardsSet->string (cardsSet (list "A" "B" "C") 2 -1 rndFn))
;;   (cardsSet->string (cardsSet (list "A" "B" "C" "D" "E" "F" "G") 3 -1 rndFn))
;;   (cardsSet->string (cardsSet (list "1" "2" "3") 2 -1 rndFn))

;; Ejemplos de uso de card->string:

;;   (card->string ("A" "B"))
;;   (card->string ("A" "B" "C"))
;;   (card->string ("B" "C"))

;; Ejemplos de uso de rndFn (FUNCION REQUERIDA):

;;   (rndFn 3)
;;   (rndFn 234)
;;   (rndFn 656)



